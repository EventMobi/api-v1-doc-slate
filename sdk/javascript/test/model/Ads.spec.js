/**
 * eventmobi
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Eventmobi);
  }
}(this, function(expect, Eventmobi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Eventmobi.Ads();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ads', function() {
    it('should create an instance of Ads', function() {
      // uncomment below and update the code to test Ads
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be.a(Eventmobi.Ads);
    });

    it('should have the property sponsorshiplevel (base name: "sponsorshiplevel")', function() {
      // uncomment below and update the code to test the property sponsorshiplevel
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property logoName (base name: "logo_name")', function() {
      // uncomment below and update the code to test the property logoName
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property callToAction (base name: "call_to_action")', function() {
      // uncomment below and update the code to test the property callToAction
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property exhibitorId (base name: "exhibitor_id")', function() {
      // uncomment below and update the code to test the property exhibitorId
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property rich (base name: "rich")', function() {
      // uncomment below and update the code to test the property rich
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property exhibitorName (base name: "exhibitor_name")', function() {
      // uncomment below and update the code to test the property exhibitorName
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property callToActionUrl (base name: "call_to_action_url")', function() {
      // uncomment below and update the code to test the property callToActionUrl
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property filename (base name: "filename")', function() {
      // uncomment below and update the code to test the property filename
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property backgroundColor (base name: "background_color")', function() {
      // uncomment below and update the code to test the property backgroundColor
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property callToActionText (base name: "call_to_action_text")', function() {
      // uncomment below and update the code to test the property callToActionText
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Eventmobi.Ads();
      //expect(instance).to.be();
    });

  });

}));
