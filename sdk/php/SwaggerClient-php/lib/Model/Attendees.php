<?php
/**
 * Attendees
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eventmobi
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: api-v2
 * Contact: support@cloud-elements.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Attendees Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Attendees implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'attendees';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'custom_fields_names' => '\Swagger\Client\Model\CustomFieldsNames[]',
        'type' => 'string',
        'color_class' => 'string',
        'url' => 'string',
        'event_id' => 'int',
        'name' => 'string',
        'icon_class' => 'string',
        'id' => 'int',
        'page' => 'string',
        'position' => 'int',
        'items' => '\Swagger\Client\Model\Items[]',
        'config' => '\Swagger\Client\Model\Config',
        'status' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'custom_fields_names' => 'custom_fields_names',
        'type' => 'type',
        'color_class' => 'color_class',
        'url' => 'url',
        'event_id' => 'event_id',
        'name' => 'name',
        'icon_class' => 'icon_class',
        'id' => 'id',
        'page' => 'page',
        'position' => 'position',
        'items' => 'items',
        'config' => 'config',
        'status' => 'status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'custom_fields_names' => 'setCustomFieldsNames',
        'type' => 'setType',
        'color_class' => 'setColorClass',
        'url' => 'setUrl',
        'event_id' => 'setEventId',
        'name' => 'setName',
        'icon_class' => 'setIconClass',
        'id' => 'setId',
        'page' => 'setPage',
        'position' => 'setPosition',
        'items' => 'setItems',
        'config' => 'setConfig',
        'status' => 'setStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'custom_fields_names' => 'getCustomFieldsNames',
        'type' => 'getType',
        'color_class' => 'getColorClass',
        'url' => 'getUrl',
        'event_id' => 'getEventId',
        'name' => 'getName',
        'icon_class' => 'getIconClass',
        'id' => 'getId',
        'page' => 'getPage',
        'position' => 'getPosition',
        'items' => 'getItems',
        'config' => 'getConfig',
        'status' => 'getStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_fields_names'] = isset($data['custom_fields_names']) ? $data['custom_fields_names'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['color_class'] = isset($data['color_class']) ? $data['color_class'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['icon_class'] = isset($data['icon_class']) ? $data['icon_class'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets custom_fields_names
     * @return \Swagger\Client\Model\CustomFieldsNames[]
     */
    public function getCustomFieldsNames()
    {
        return $this->container['custom_fields_names'];
    }

    /**
     * Sets custom_fields_names
     * @param \Swagger\Client\Model\CustomFieldsNames[] $custom_fields_names
     * @return $this
     */
    public function setCustomFieldsNames($custom_fields_names)
    {
        $this->container['custom_fields_names'] = $custom_fields_names;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets color_class
     * @return string
     */
    public function getColorClass()
    {
        return $this->container['color_class'];
    }

    /**
     * Sets color_class
     * @param string $color_class
     * @return $this
     */
    public function setColorClass($color_class)
    {
        $this->container['color_class'] = $color_class;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets event_id
     * @return int
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     * @param int $event_id
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon_class
     * @return string
     */
    public function getIconClass()
    {
        return $this->container['icon_class'];
    }

    /**
     * Sets icon_class
     * @param string $icon_class
     * @return $this
     */
    public function setIconClass($icon_class)
    {
        $this->container['icon_class'] = $icon_class;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets page
     * @return string
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     * @param string $page
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets items
     * @return \Swagger\Client\Model\Items[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \Swagger\Client\Model\Items[] $items
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets config
     * @return \Swagger\Client\Model\Config
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     * @param \Swagger\Client\Model\Config $config
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


