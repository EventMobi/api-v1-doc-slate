<?php
/**
 * ObjectsMetadataFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eventmobi
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: api-v2
 * Contact: support@cloud-elements.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ObjectsMetadataFields Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ObjectsMetadataFields implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'objectsMetadataFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'mask' => 'string',
        'type' => 'string',
        'vendor_display_name' => 'string',
        'vendor_path' => 'string',
        'vendor_read_only' => 'bool',
        'vendor_required' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'mask' => 'mask',
        'type' => 'type',
        'vendor_display_name' => 'vendorDisplayName',
        'vendor_path' => 'vendorPath',
        'vendor_read_only' => 'vendorReadOnly',
        'vendor_required' => 'vendorRequired'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'mask' => 'setMask',
        'type' => 'setType',
        'vendor_display_name' => 'setVendorDisplayName',
        'vendor_path' => 'setVendorPath',
        'vendor_read_only' => 'setVendorReadOnly',
        'vendor_required' => 'setVendorRequired'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'mask' => 'getMask',
        'type' => 'getType',
        'vendor_display_name' => 'getVendorDisplayName',
        'vendor_path' => 'getVendorPath',
        'vendor_read_only' => 'getVendorReadOnly',
        'vendor_required' => 'getVendorRequired'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vendor_display_name'] = isset($data['vendor_display_name']) ? $data['vendor_display_name'] : null;
        $this->container['vendor_path'] = isset($data['vendor_path']) ? $data['vendor_path'] : null;
        $this->container['vendor_read_only'] = isset($data['vendor_read_only']) ? $data['vendor_read_only'] : null;
        $this->container['vendor_required'] = isset($data['vendor_required']) ? $data['vendor_required'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets mask
     * @return string
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     * @param string $mask
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vendor_display_name
     * @return string
     */
    public function getVendorDisplayName()
    {
        return $this->container['vendor_display_name'];
    }

    /**
     * Sets vendor_display_name
     * @param string $vendor_display_name
     * @return $this
     */
    public function setVendorDisplayName($vendor_display_name)
    {
        $this->container['vendor_display_name'] = $vendor_display_name;

        return $this;
    }

    /**
     * Gets vendor_path
     * @return string
     */
    public function getVendorPath()
    {
        return $this->container['vendor_path'];
    }

    /**
     * Sets vendor_path
     * @param string $vendor_path
     * @return $this
     */
    public function setVendorPath($vendor_path)
    {
        $this->container['vendor_path'] = $vendor_path;

        return $this;
    }

    /**
     * Gets vendor_read_only
     * @return bool
     */
    public function getVendorReadOnly()
    {
        return $this->container['vendor_read_only'];
    }

    /**
     * Sets vendor_read_only
     * @param bool $vendor_read_only
     * @return $this
     */
    public function setVendorReadOnly($vendor_read_only)
    {
        $this->container['vendor_read_only'] = $vendor_read_only;

        return $this;
    }

    /**
     * Gets vendor_required
     * @return bool
     */
    public function getVendorRequired()
    {
        return $this->container['vendor_required'];
    }

    /**
     * Sets vendor_required
     * @param bool $vendor_required
     * @return $this
     */
    public function setVendorRequired($vendor_required)
    {
        $this->container['vendor_required'] = $vendor_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


