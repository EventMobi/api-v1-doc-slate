<?php
/**
 * Ads
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eventmobi
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: api-v2
 * Contact: support@cloud-elements.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Ads Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ads implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ads';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'sponsorshiplevel' => 'string',
        'logo_name' => 'string',
        'call_to_action' => 'string',
        'exhibitor_id' => 'string',
        'link' => 'string',
        'rich' => 'string',
        'exhibitor_name' => 'string',
        'title' => 'string',
        'message' => 'string',
        'type' => 'string',
        'call_to_action_url' => 'string',
        'filename' => 'string',
        'background_color' => 'string',
        'call_to_action_text' => 'string',
        'id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'sponsorshiplevel' => 'sponsorshiplevel',
        'logo_name' => 'logo_name',
        'call_to_action' => 'call_to_action',
        'exhibitor_id' => 'exhibitor_id',
        'link' => 'link',
        'rich' => 'rich',
        'exhibitor_name' => 'exhibitor_name',
        'title' => 'title',
        'message' => 'message',
        'type' => 'type',
        'call_to_action_url' => 'call_to_action_url',
        'filename' => 'filename',
        'background_color' => 'background_color',
        'call_to_action_text' => 'call_to_action_text',
        'id' => 'id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'sponsorshiplevel' => 'setSponsorshiplevel',
        'logo_name' => 'setLogoName',
        'call_to_action' => 'setCallToAction',
        'exhibitor_id' => 'setExhibitorId',
        'link' => 'setLink',
        'rich' => 'setRich',
        'exhibitor_name' => 'setExhibitorName',
        'title' => 'setTitle',
        'message' => 'setMessage',
        'type' => 'setType',
        'call_to_action_url' => 'setCallToActionUrl',
        'filename' => 'setFilename',
        'background_color' => 'setBackgroundColor',
        'call_to_action_text' => 'setCallToActionText',
        'id' => 'setId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'sponsorshiplevel' => 'getSponsorshiplevel',
        'logo_name' => 'getLogoName',
        'call_to_action' => 'getCallToAction',
        'exhibitor_id' => 'getExhibitorId',
        'link' => 'getLink',
        'rich' => 'getRich',
        'exhibitor_name' => 'getExhibitorName',
        'title' => 'getTitle',
        'message' => 'getMessage',
        'type' => 'getType',
        'call_to_action_url' => 'getCallToActionUrl',
        'filename' => 'getFilename',
        'background_color' => 'getBackgroundColor',
        'call_to_action_text' => 'getCallToActionText',
        'id' => 'getId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sponsorshiplevel'] = isset($data['sponsorshiplevel']) ? $data['sponsorshiplevel'] : null;
        $this->container['logo_name'] = isset($data['logo_name']) ? $data['logo_name'] : null;
        $this->container['call_to_action'] = isset($data['call_to_action']) ? $data['call_to_action'] : null;
        $this->container['exhibitor_id'] = isset($data['exhibitor_id']) ? $data['exhibitor_id'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['rich'] = isset($data['rich']) ? $data['rich'] : null;
        $this->container['exhibitor_name'] = isset($data['exhibitor_name']) ? $data['exhibitor_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['call_to_action_url'] = isset($data['call_to_action_url']) ? $data['call_to_action_url'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['call_to_action_text'] = isset($data['call_to_action_text']) ? $data['call_to_action_text'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets sponsorshiplevel
     * @return string
     */
    public function getSponsorshiplevel()
    {
        return $this->container['sponsorshiplevel'];
    }

    /**
     * Sets sponsorshiplevel
     * @param string $sponsorshiplevel
     * @return $this
     */
    public function setSponsorshiplevel($sponsorshiplevel)
    {
        $this->container['sponsorshiplevel'] = $sponsorshiplevel;

        return $this;
    }

    /**
     * Gets logo_name
     * @return string
     */
    public function getLogoName()
    {
        return $this->container['logo_name'];
    }

    /**
     * Sets logo_name
     * @param string $logo_name
     * @return $this
     */
    public function setLogoName($logo_name)
    {
        $this->container['logo_name'] = $logo_name;

        return $this;
    }

    /**
     * Gets call_to_action
     * @return string
     */
    public function getCallToAction()
    {
        return $this->container['call_to_action'];
    }

    /**
     * Sets call_to_action
     * @param string $call_to_action
     * @return $this
     */
    public function setCallToAction($call_to_action)
    {
        $this->container['call_to_action'] = $call_to_action;

        return $this;
    }

    /**
     * Gets exhibitor_id
     * @return string
     */
    public function getExhibitorId()
    {
        return $this->container['exhibitor_id'];
    }

    /**
     * Sets exhibitor_id
     * @param string $exhibitor_id
     * @return $this
     */
    public function setExhibitorId($exhibitor_id)
    {
        $this->container['exhibitor_id'] = $exhibitor_id;

        return $this;
    }

    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     * @param string $link
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets rich
     * @return string
     */
    public function getRich()
    {
        return $this->container['rich'];
    }

    /**
     * Sets rich
     * @param string $rich
     * @return $this
     */
    public function setRich($rich)
    {
        $this->container['rich'] = $rich;

        return $this;
    }

    /**
     * Gets exhibitor_name
     * @return string
     */
    public function getExhibitorName()
    {
        return $this->container['exhibitor_name'];
    }

    /**
     * Sets exhibitor_name
     * @param string $exhibitor_name
     * @return $this
     */
    public function setExhibitorName($exhibitor_name)
    {
        $this->container['exhibitor_name'] = $exhibitor_name;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets call_to_action_url
     * @return string
     */
    public function getCallToActionUrl()
    {
        return $this->container['call_to_action_url'];
    }

    /**
     * Sets call_to_action_url
     * @param string $call_to_action_url
     * @return $this
     */
    public function setCallToActionUrl($call_to_action_url)
    {
        $this->container['call_to_action_url'] = $call_to_action_url;

        return $this;
    }

    /**
     * Gets filename
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     * @param string $filename
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets background_color
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     * @param string $background_color
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets call_to_action_text
     * @return string
     */
    public function getCallToActionText()
    {
        return $this->container['call_to_action_text'];
    }

    /**
     * Sets call_to_action_text
     * @param string $call_to_action_text
     * @return $this
     */
    public function setCallToActionText($call_to_action_text)
    {
        $this->container['call_to_action_text'] = $call_to_action_text;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


