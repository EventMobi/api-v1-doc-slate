{
    "swagger": "2.0",
    "info": {
        "title": "EventMobi API V2 Spec",
        "description": "Eventmobi Public API documentation.\n\nPlease refer to [developer site for tutotials, SDK and helps](http://google.ca).\n\nUpdated Aug 2016. Please refer to the [patch notes for details](http://google.ca).\n",
        "version": "2.0.1a"
    },
    "host": "api.eventmobi.com",
    "schemes": [
        "https"
    ],
    "basePath": "/en/api/v2",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/events": {
            "get": {
                "summary": "GET events",
                "description": "List all the events associated with the current organization by API Key or authentication credentials. \n\nOnly basic event infomation will be provided in response to idenitfy events. Please use /events/{eventID} to retrieve details of each event.\n",
                "tags": [
                    "Event"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/LimitParam"
                    },
                    {
                        "$ref": "#/parameters/OffsetParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of basic event info",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EventObjectResponse"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "x-category": "Event"
            },
            "post": {
                "summary": "POST events",
                "tags": [
                    "Event"
                ],
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "event",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EventObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new event created",
                        "schema": {
                            "$ref": "#/definitions/EventObjectResponse"
                        }
                    },
                    "402": {
                        "description": "Please contact our Sales to set up new event",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "An Event with same ID already exist for the target system.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}": {
            "get": {
                "summary": "GET event",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Event"
                ],
                "responses": {
                    "200": {
                        "description": "The event info created",
                        "schema": {
                            "$ref": "#/definitions/EventObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "PATCH event",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "name": "event",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EventObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "Event"
                ],
                "responses": {
                    "200": {
                        "description": "The event info created",
                        "schema": {
                            "$ref": "#/definitions/EventObjectResponse"
                        }
                    },
                    "403": {
                        "description": "One or more fields is read-only or auto-generated. It should not set in request.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "PUT event",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "name": "event",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EventObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "Event"
                ],
                "responses": {
                    "200": {
                        "description": "The event info updated",
                        "schema": {
                            "$ref": "#/definitions/EventObjectResponse"
                        }
                    },
                    "403": {
                        "description": "One or more fields is read-only or auto-generated. It should not set in request.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people": {
            "get": {
                "summary": "GET people",
                "description": "This request will return an overview of people data statistics in specific events. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The statistics of people data",
                        "schema": {
                            "$ref": "#/definitions/PeopleOverview"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data": {
            "get": {
                "summary": "GET person",
                "description": "This request will return an array of people data statistics in specific events. Default paginition is the first 20 records from offset 0. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "$ref": "#/parameters/LimitParam"
                    },
                    {
                        "$ref": "#/parameters/OffsetParam"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The array of people",
                        "schema": {
                            "$ref": "#/definitions/PeopleRecordsResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "POST person",
                "description": "Add new person in the event\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "person",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The person record created",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data/{person_id}": {
            "get": {
                "summary": "GET person_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The single person record",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "PATCH person_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "person",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The person record updated",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "PUT person_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "person",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The person record updated",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETE person_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "The person record deleted",
                        "schema": {
                            "$ref": "#/definitions/PersonObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data/{person_id}/groups": {
            "get": {
                "summary": "Retrieve the groups specific person belongs to",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "List of groups the person belongs to",
                        "schema": {
                            "$ref": "#/definitions/ResponseGroupArray"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data/{person_id}/groups/{group_id}": {
            "post": {
                "summary": "Add person to a group",
                "description": "Add the Person to the Group. The group_id can be either group name or group ID. If group name has special character, it must be encoded as URL. Body is not needed and will be ignored for this request.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The groups person belongs to",
                        "schema": {
                            "$ref": "#/definitions/ResponseGroupArray"
                        }
                    },
                    "409": {
                        "description": "The person already belongs to the group.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete person from group",
                "description": "Remove the person from the group. The group_id can be either group name or group ID. If group name has special character, it must be encoded as URL. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The groups person belongs to",
                        "schema": {
                            "$ref": "#/definitions/ResponseGroupArray"
                        }
                    },
                    "404": {
                        "description": "The person doesn't belong to the group.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data/{person_id}/sessions": {
            "get": {
                "summary": "Retrieve the sessions that this person will attend as attendee",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/data/{person_id}/sessions/{session_id}": {
            "post": {
                "summary": "Add a session to specifc person (as attendee)",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The sessions person (as attendee) belongs to",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "409": {
                        "description": "The person already has this session.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete person from session attendee list",
                "description": "Delete person from session attendee list\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The sessions person (as attendee) belongs to",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "404": {
                        "description": "The person doesn't belong to the attendee list.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/groups": {
            "get": {
                "summary": "Get all defined People Groups",
                "description": "This request will return an array of people group details. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The array of groups defined in People",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralGroup"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create new People Group",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "group",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestPeopleGroup"
                        }
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The group created",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralGroup"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/groups/{group_id}": {
            "get": {
                "summary": "Get specifc People Group info",
                "description": "This request will return the detail of specific people group. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The People Group definition",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralGroup"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete People Group ",
                "description": "This will delete the People Group and remove all members from this group. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The group deleted",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/groups/{group_id}/members": {
            "get": {
                "summary": "Get all People inside th group",
                "description": "This request will return basic info of people in the group. This will only include people ID, name, email and timestamp.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The member of people in the specific group.",
                        "schema": {
                            "$ref": "#/definitions/ResponsePeopleGroupMember"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/custom_fields": {
            "get": {
                "summary": "Get all defined Custom Fields",
                "description": "This request will return an array of people custom fields. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The array of custom fields defined in People",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create new People Custom Field",
                "description": "This request will use the field definition in body to create new custom field for People.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "People",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The custom field created",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralCustomFields"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/people/custom_fields/{field_id}": {
            "put": {
                "summary": "Overwrite Custom Fields definition",
                "description": "This request will overwrite the definition of specific customer field. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "People",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The new definition of custom field",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update Custom Fields definition",
                "description": "This request will update the definition of specific customer field. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "People",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The new definition of custom field",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Custom Fields definition",
                "description": "This request will delete the definition of specific customer field. All values of this custome field saved in people records will be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The rest of custome fields available in People",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions": {
            "get": {
                "summary": "GET sessions",
                "description": "This request will return an overview of event schedule, session and track info. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The overview of all session data",
                        "schema": {
                            "$ref": "#/definitions/SessionsOverview"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/data": {
            "get": {
                "summary": "GET person",
                "description": "This request will return an array of sessions data statistics in specific events. Default paginition is the first 20 records from offset 0. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "$ref": "#/parameters/LimitParam"
                    },
                    {
                        "$ref": "#/parameters/OffsetParam"
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The array of sessions.",
                        "schema": {
                            "$ref": "#/definitions/SessionRecordsResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "POST session",
                "description": "Defining a new session\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "session",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The session record created",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/data/{session_id}": {
            "get": {
                "summary": "GET session_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The single session record",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "PATCH session_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "session",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The session record updated",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "PUT session_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "session",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectRequest"
                        }
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The session record updated",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETE session_id",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The session record that successfully deleted.",
                        "schema": {
                            "$ref": "#/definitions/SessionObjectResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/data/{session_id}/attendees": {
            "get": {
                "summary": "Retrieve the attendees of specific session",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "List of attendees",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/data/{session_id}/attendees/{person_id}": {
            "post": {
                "summary": "Add an attendee to specifc session",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "The attendees",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "409": {
                        "description": "The attendee people is already in the session.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete person from session attendee list",
                "description": "Delete person from session attendee list\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/PersonIDParam"
                    },
                    {
                        "$ref": "#/parameters/SessionIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "People",
                    "Session"
                ],
                "responses": {
                    "200": {
                        "description": "Success deleted"
                    },
                    "404": {
                        "description": "The attendee people doesn't belong to the session.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/tracks": {
            "get": {
                "summary": "Get all defined Session Tracks",
                "description": "This request will return an array of session track details. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The array of tracks defined in Sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralGroup"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create new session track",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "track",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    }
                ],
                "tags": [
                    "Session",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The session track created",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralGroup"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/tracks/{group_id}": {
            "get": {
                "summary": "Get specifc Session Track info",
                "description": "This request will return the detail of specific session track. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The Session Track definition",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralGroup"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Session Track",
                "description": "This will delete the Session Track and remove all sessions from this track. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The track deleted",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/tracks/{group_id}/list": {
            "get": {
                "summary": "Get all sessions in the track",
                "description": "This request will return basic info of sessions in the track. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/GroupIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "The list of sessions in the specific track.",
                        "schema": {
                            "$ref": "#/definitions/PlaceHolder"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/custom_fields": {
            "get": {
                "summary": "Get all defined Custom Fields",
                "description": "This request will return an array of people custom fields. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The array of custom fields defined in People",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create new People Custom Field",
                "description": "This request will use the field definition in body to create new custom field for People.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "Session",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The custom field created",
                        "schema": {
                            "$ref": "#/definitions/ResponseGeneralCustomFields"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/sessions/custom_fields/{field_id}": {
            "put": {
                "summary": "Overwrite Custom Fields definition",
                "description": "This request will overwrite the definition of specific customer field. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "Session",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The new definition of custom field",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update Custom Fields definition",
                "description": "This request will update the definition of specific customer field. \n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "field",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestGeneralCustomField"
                        }
                    }
                ],
                "tags": [
                    "Session",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The new definition of custom field",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Custom Fields definition",
                "description": "This request will delete the definition of specific customer field. All values of this custome field saved in people records will be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/FieldIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Session",
                    "Customize"
                ],
                "responses": {
                    "200": {
                        "description": "The rest of custome fields available in Sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResponseGeneralCustomFields"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/event/{event_id}/resources/pictures": {
            "get": {
                "summary": "Get the info of pictures uploaded for specific event",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Resource"
                ],
                "responses": {
                    "200": {
                        "description": "the array of picture info",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceResponse"
                            }
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Upload new picture resource.",
                "description": "In person profile or company logo, this uploaded picture can be used with the response filename (not url).\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "resource",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ResourceRequest"
                        }
                    }
                ],
                "tags": [
                    "Resource"
                ],
                "responses": {
                    "200": {
                        "description": "the uploaded picture",
                        "schema": {
                            "$ref": "#/definitions/ResourceResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/event/{event_id}/resources/pictures/{resource_id}": {
            "get": {
                "summary": "Get the info of specifc picture uploaded",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/ResourceIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    }
                ],
                "tags": [
                    "Resource"
                ],
                "responses": {
                    "200": {
                        "description": "the uploaded picture info",
                        "schema": {
                            "$ref": "#/definitions/ResourceResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "replace the uploaded picture with the same filename",
                "description": "Placeholder\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/EventIDParam"
                    },
                    {
                        "$ref": "#/parameters/IDSystemParam"
                    },
                    {
                        "$ref": "#/parameters/ResourceIDParam"
                    },
                    {
                        "$ref": "#/parameters/TimestampFormat"
                    },
                    {
                        "name": "resource",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ResourceRequest"
                        }
                    }
                ],
                "tags": [
                    "Resource"
                ],
                "responses": {
                    "200": {
                        "description": "the updated picture info",
                        "schema": {
                            "$ref": "#/definitions/ResourceResponse"
                        }
                    },
                    "default": {
                        "description": "General 400/500 error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "EventObjectRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "the target Eventmobi ID of event."
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations.",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "short_code": {
                    "type": "string",
                    "description": "the short-code and url path of event"
                },
                "name": {
                    "type": "string",
                    "description": "the event name"
                },
                "description": {
                    "type": "string",
                    "description": "the description of event in HTML code"
                },
                "language": {
                    "type": "string",
                    "description": "the language of event"
                },
                "event_location": {
                    "$ref": "#/definitions/EventLocation"
                },
                "event_dates": {
                    "$ref": "#/definitions/EventDates"
                }
            }
        },
        "EventObjectResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "the default Eventmobi ID of event."
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "short_code": {
                    "type": "string",
                    "description": "the short-code and url path of event"
                },
                "name": {
                    "type": "string",
                    "description": "the event name"
                },
                "description": {
                    "type": "string",
                    "description": "the description of event in HTML code"
                },
                "language": {
                    "type": "string",
                    "description": "the language of event"
                },
                "data_counters": {
                    "$ref": "#/definitions/DataCounters"
                },
                "event_location": {
                    "$ref": "#/definitions/EventLocation"
                },
                "event_dates": {
                    "$ref": "#/definitions/EventDates"
                },
                "event_urls": {
                    "$ref": "#/definitions/EventURLs"
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "DataCounters": {
            "type": "object",
            "description": "The numbers of each event data type. Auto-generated: will ignore in post request",
            "properties": {
                "sections": {
                    "type": "integer",
                    "description": "the number of front-end UI sections in this event"
                },
                "people": {
                    "type": "integer",
                    "description": "the number of people (speaker, attendee, etc.) in this event. Note: the contacts in reg mailing list are not included."
                },
                "sessions": {
                    "type": "integer",
                    "description": "the number of session included in this event"
                },
                "companies": {
                    "type": "integer",
                    "description": "the number of companies included in this event"
                },
                "documents": {
                    "type": "integer",
                    "description": "the number of documents uploaded"
                },
                "maps": {
                    "type": "integer",
                    "description": "the number of maps"
                }
            }
        },
        "EventLocation": {
            "type": "object",
            "description": "The location information of event",
            "properties": {
                "location_name": {
                    "type": "string",
                    "description": "the name of location (e.g. Eventmobi HQ)"
                },
                "location_address": {
                    "type": "string",
                    "description": "the full address of location (e.g. 175 Bloor St East, Toronto, ON M4W 3R8). Please test with Google Maps to ensure the address can be located correctly."
                }
            }
        },
        "EventDates": {
            "type": "object",
            "description": "The dates info of event",
            "properties": {
                "start_date": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "description": "the start date of event in YYYY-MM-DD"
                },
                "end_date": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "description": "the end date of event in YYYY-MM-DD"
                },
                "time_zone_tz": {
                    "type": "string",
                    "description": "the timezone tz name in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. E.g. America/Toronto"
                },
                "time_zone_offset": {
                    "type": "string",
                    "description": "the timezone offset to UTC. E.g. -05:00"
                },
                "time_format": {
                    "type": "integer",
                    "enum": [
                        12,
                        24
                    ],
                    "default": 12,
                    "description": "the number value can be 12 or 24 hours format. Default value: 12"
                }
            }
        },
        "EventURLs": {
            "type": "object",
            "description": "The URLs of each Eventmobi products. Auto-generated: will ignore in post request",
            "properties": {
                "event_app": {
                    "type": "string",
                    "description": "the URL to launch event web App"
                },
                "reg_app": {
                    "type": "string",
                    "description": "the URL to launch reg web App"
                },
                "checkin_app": {
                    "type": "string",
                    "description": "the URL to launch check in App"
                },
                "cms_app": {
                    "type": "string",
                    "description": "the URL to launch CMS backend"
                }
            }
        },
        "PeopleOverview": {
            "type": "object",
            "description": "The statistics of people data",
            "properties": {
                "people_number": {
                    "type": "integer",
                    "description": "people number in this event. You may use this number for better query pagination."
                },
                "group_number": {
                    "type": "integer",
                    "description": "the number of groups defined"
                },
                "custom_field_number": {
                    "type": "integer",
                    "description": "the number of custom fields"
                },
                "groups": {
                    "type": "array",
                    "description": "the groups defined in this event.",
                    "items": {
                        "$ref": "#/definitions/ResponseGeneralGroup"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "description": "the custom fields defined in this event",
                    "items": {
                        "$ref": "#/definitions/ResponseGeneralCustomFields"
                    }
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "PeopleRecordsResponse": {
            "type": "object",
            "description": "the query of people",
            "properties": {
                "query_string": {
                    "type": "string",
                    "description": "the original query string. Offset and limit parameter will show default value (offset=0&limit=20) if not provided in original request."
                },
                "record_number": {
                    "type": "integer",
                    "description": "the number of recodes that matches query. If no query filters requested, this will be the total number of people."
                },
                "people_list": {
                    "type": "array",
                    "description": "the array of people",
                    "items": {
                        "$ref": "#/definitions/PersonObjectResponse"
                    }
                }
            }
        },
        "PersonObjectRequest": {
            "type": "object",
            "description": "the single person record",
            "properties": {
                "person_id": {
                    "type": "string",
                    "description": "the unique ID of person in people"
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "profile": {
                    "$ref": "#/definitions/PersonProfile"
                },
                "upload_picture": {
                    "$ref": "#/definitions/RequestUploadAssociatePicture"
                },
                "uplaod_docs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RequestUploadAssociateDoc"
                    }
                }
            }
        },
        "PersonObjectResponse": {
            "type": "object",
            "description": "the single person record",
            "properties": {
                "person_id": {
                    "type": "string",
                    "description": "the unique ID of person in people"
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "profile": {
                    "$ref": "#/definitions/PersonProfile"
                },
                "custom_fields_meta": {
                    "type": "object",
                    "description": "the {custom_field_key:custom_field_value} format JSON object"
                },
                "favorite_data": {
                    "$ref": "#/definitions/AttendeePersonalData"
                },
                "regstration": {
                    "$ref": "#/definitions/PersonRegistration"
                },
                "docs": {
                    "type": "array",
                    "description": "the docs linked to the people",
                    "items": {
                        "$ref": "#/definitions/DocLink"
                    }
                },
                "config_meta": {
                    "type": "object",
                    "description": "the {config_feature_key:config_value} format JSON object E.g.  {\"Enable Messaging\":\"true\"}."
                },
                "tags": {
                    "type": "string",
                    "description": "tags for the person. Seperated by \",\" between keywords."
                },
                "activities": {
                    "type": "array",
                    "description": "activity logs of a person record.",
                    "items": {
                        "$ref": "#/definitions/GeneralActivityRecord"
                    }
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "PersonProfile": {
            "type": "object",
            "description": "the profile data of person. Including standard Eventmobi fields as well as custom fields.",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "the ID of groups. Please use /people/groups to check group config."
                    }
                },
                "company": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "about": {
                    "type": "string"
                },
                "social_contacts": {
                    "$ref": "#/definitions/SocialContactInfo"
                }
            }
        },
        "PersonRegistration": {
            "type": "object",
            "description": "the registriation info. Only avialable when using Eventmobi registration product.",
            "properties": {
                "order_ticket_name": {
                    "type": "string",
                    "description": "Ticket Name"
                },
                "order_paid": {
                    "type": "string",
                    "description": "Amount and Currency Type in format of \"$ 1,289 USD\""
                },
                "order_transaction_id": {
                    "type": "string",
                    "description": "Striple transaction id for tracking"
                },
                "reg_email_campaign": {
                    "type": "string",
                    "description": "The email title user used to register"
                },
                "reg_utm": {
                    "type": "string",
                    "description": "The UTM tracking parameters in encoded string"
                },
                "form_meta": {
                    "type": "array",
                    "description": "The info user filled in form in reg app",
                    "items": {
                        "type": "object",
                        "properties": {
                            "question": {
                                "type": "string"
                            },
                            "answer": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "SessionsOverview": {
            "type": "object",
            "description": "The statistics of sessions data",
            "properties": {
                "session_number": {
                    "type": "integer",
                    "description": "session number in this event. You may use this number for better query pagination."
                },
                "track_number": {
                    "type": "integer",
                    "description": "the number of groups defined"
                },
                "custom_field_number": {
                    "type": "integer",
                    "description": "the number of custom fields"
                },
                "session_role_number": {
                    "type": "integer",
                    "description": "the number of session roles fields"
                },
                "tracks": {
                    "type": "array",
                    "description": "the session groups defined in this event.",
                    "items": {
                        "$ref": "#/definitions/ResponseGeneralGroup"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "description": "the custom fields defined in sessions",
                    "items": {
                        "$ref": "#/definitions/ResponseGeneralCustomFields"
                    }
                },
                "sessions_roles": {
                    "type": "array",
                    "description": "the roles defined in sessions",
                    "items": {
                        "$ref": "#/definitions/ResponseGeneralCustomFields"
                    }
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "SessionRecordsResponse": {
            "type": "object",
            "description": "the query of sessions",
            "properties": {
                "query_string": {
                    "type": "string",
                    "description": "the original query string. Offset and limit parameter will show default value (offset=0&limit=20) if not provided in original request."
                },
                "record_number": {
                    "type": "integer",
                    "description": "the number of recodes that matches query. If no query filters requested, this will be the total number of people."
                },
                "session_list": {
                    "type": "array",
                    "description": "the array of sessions",
                    "items": {
                        "$ref": "#/definitions/SessionObjectResponse"
                    }
                }
            }
        },
        "SessionObjectRequest": {
            "type": "object",
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "the unique session id"
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "session_name": {
                    "type": "string"
                },
                "session_description": {
                    "type": "string",
                    "description": "the html encoded string. Please ensure the correct gramma."
                },
                "session_date": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "description": "the session date in YYYY-MM-DD format"
                },
                "session_start_time": {
                    "type": "string",
                    "format": "HH-MM",
                    "description": "the session start time in HH-MM in 24hour"
                },
                "session_end_time": {
                    "type": "string",
                    "format": "HH-MM",
                    "description": "the session end time in HH-MM in 24hour"
                },
                "speakers": {
                    "type": "array",
                    "description": "the people ID as session speakers. External ID supported if request use ext_id_system parameter",
                    "items": {
                        "type": "string"
                    }
                },
                "session_tracks": {
                    "type": "array",
                    "description": "the ID of tracks this session belongs to",
                    "items": {
                        "type": "string"
                    }
                },
                "external_links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/URLLink"
                    }
                },
                "docs": {
                    "type": "array",
                    "description": "the docs linked to the people",
                    "items": {
                        "$ref": "#/definitions/DocLink"
                    }
                },
                "session_roles": {
                    "type": "array",
                    "description": "the session roles like Speaker, Moderator, etc. Attendees are not in this list. If you want to manage/update this list, you will need to provide the full array of roles. [Issue@Ryan do we support another endpoint like /roles]",
                    "items": {
                        "type": "object",
                        "properties": {
                            "role_name": {
                                "type": "string",
                                "description": "currently only supports \"Speaker\" and \"Moderator\""
                            },
                            "people_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "the people IDs assigned to this role"
                                }
                            }
                        }
                    }
                }
            }
        },
        "SessionObjectResponse": {
            "type": "object",
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "the unique session id"
                },
                "external_ids": {
                    "type": "array",
                    "description": "the external IDs used for integrations",
                    "items": {
                        "$ref": "#/definitions/IDs"
                    }
                },
                "session_name": {
                    "type": "string"
                },
                "session_description": {
                    "type": "string",
                    "description": "the html encoded string. Please ensure the correct gramma."
                },
                "session_date": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "description": "the session date in YYYY-MM-DD format"
                },
                "session_start_time": {
                    "type": "string",
                    "format": "HH-MM",
                    "description": "the session start time in HH-MM in 24hour"
                },
                "session_end_time": {
                    "type": "string",
                    "format": "HH-MM",
                    "description": "the session end time in HH-MM in 24hour"
                },
                "session_tracks": {
                    "type": "array",
                    "description": "the ID of tracks this session belongs to",
                    "items": {
                        "type": "string"
                    }
                },
                "external_links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/URLLink"
                    }
                },
                "docs": {
                    "type": "array",
                    "description": "the docs linked to the people",
                    "items": {
                        "$ref": "#/definitions/DocLink"
                    }
                },
                "session_roles": {
                    "type": "array",
                    "description": "the session roles like Speaker, Moderator, etc. Attendees are not in this list.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "role_name": {
                                "type": "string",
                                "description": "currently only supports \"Speaker\" and \"Moderator\""
                            },
                            "people_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "the people IDs assigned to this role"
                                }
                            }
                        }
                    }
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "ResourceRequest": {
            "type": "object",
            "description": "please provide the resource type and choose the resource info below.",
            "properties": {
                "resource_type": {
                    "type": "string"
                },
                "upload_picture": {
                    "$ref": "#/definitions/RequestUploadAssociatePicture"
                }
            }
        },
        "ResourceResponse": {
            "type": "object",
            "description": "the info of the resources uploaded. Event documents are not in this list.",
            "properties": {
                "resource_id": {
                    "type": "string",
                    "description": "the UUID of resource"
                },
                "resource_type": {
                    "type": "string"
                },
                "filename": {
                    "type": "string",
                    "description": "the filename use for person profile photo, company logo, etc."
                },
                "url": {
                    "type": "string",
                    "description": "the encoded URL to access resource"
                },
                "upload_filename": {
                    "type": "string",
                    "description": "the original filename before renaming or processing"
                },
                "upload_request": {
                    "type": "string",
                    "description": "if upload with request with upload_picture parameter in People/Companies/etc., this will be the API call path"
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "IDs": {
            "type": "object",
            "description": "The IDs from different systems. Used for integration mapping. A default Eventmobi ID will always be generated and cannot be changed once created. Additional IDs can be added/updated for external systems.",
            "properties": {
                "id_system": {
                    "type": "string",
                    "description": "The external ID can be accessed when query indicateds which system the ID belongs to. The default system Eventmobi is reserved.\n"
                },
                "id": {
                    "type": "string",
                    "description": "the external ID"
                }
            }
        },
        "DocLink": {
            "type": "string",
            "description": "The document ID"
        },
        "URLLink": {
            "type": "object",
            "description": "The extra links",
            "properties": {
                "link_name": {
                    "type": "string"
                },
                "link_url": {
                    "type": "string"
                }
            }
        },
        "RequestUploadAssociateDoc": {
            "type": "object",
            "description": "Use this structure if you want Eventmobi to download the document from Internet locations and associate it.",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "file location. Have to have a valid document type ()"
                },
                "rename": {
                    "type": "string",
                    "description": "Must be the same file type as origin. Supports jpeg, jpg and png."
                },
                "assign_groups": {
                    "type": "array",
                    "description": "the groups this documetion belongs to. the groups must be defined in CMS or this will be ignored.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RequestUploadAssociatePicture": {
            "type": "object",
            "description": "Use this structure if you want Eventmobi to download the picture from Internet locations and associate picture. You will need to specify image cropping info if the picture is not square (same height and length). This will overwrite the picture filename in base profile.",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "file location. Have to be a valid image file. Supports jpeg, jpg and png."
                },
                "trim": {
                    "type": "string",
                    "format": "AxB:CxD",
                    "description": "AxB:CxD means manually crop the image at left-top point AxB and right-bottom point CxD in pixels. This parameter is required if your image is not square (same height and length)"
                },
                "rename": {
                    "type": "string",
                    "description": "Must be the same file type as origin. Supports jpeg, jpg and png."
                }
            }
        },
        "SocialContactInfo": {
            "type": "object",
            "description": "The general contact info record",
            "properties": {
                "twitter_url": {
                    "type": "string"
                },
                "facebook_url": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                }
            }
        },
        "RequestGeneralCustomField": {
            "type": "object",
            "description": "The base custom field request",
            "properties": {
                "field_name": {
                    "type": "string",
                    "description": "the field name"
                },
                "view_permission": {
                    "type": "string",
                    "enum": [
                        "Everyone",
                        "Organizer and Data Owner",
                        "Organizer"
                    ]
                },
                "edit_permission": {
                    "type": "string",
                    "enum": [
                        "Everyone",
                        "Organizer and Data Owner",
                        "Organizer"
                    ]
                }
            }
        },
        "ResponseGeneralCustomFields": {
            "type": "object",
            "description": "The base custom field model",
            "properties": {
                "custom_field_id": {
                    "type": "string",
                    "description": "the unique ID of custom field"
                },
                "field_name": {
                    "type": "string",
                    "description": "the field name"
                },
                "view_permission": {
                    "type": "string",
                    "enum": [
                        "Everyone",
                        "Organizer and Data Owner",
                        "Organizer"
                    ]
                },
                "edit_permission": {
                    "type": "string",
                    "enum": [
                        "Everyone",
                        "Organizer and Data Owner",
                        "Organizer"
                    ]
                }
            }
        },
        "ResponseGeneralGroup": {
            "type": "object",
            "description": "The base response model of groups",
            "properties": {
                "group_id": {
                    "type": "string",
                    "description": "the unique ID of group"
                },
                "group_name": {
                    "type": "string",
                    "description": "the unique name of group"
                },
                "group_color": {
                    "type": "string",
                    "format": "#RRGGBB",
                    "description": "the HEX color code in #RRGGBB"
                },
                "group_note": {
                    "type": "string",
                    "description": "the optional note/explaination of this group"
                },
                "sub_group_ids": {
                    "type": "array",
                    "description": "the id array of sub-groups/sub-tracks",
                    "items": {
                        "type": "string"
                    }
                },
                "member_number": {
                    "type": "number",
                    "description": "the auto-generated number of members in this group"
                },
                "timestamps": {
                    "$ref": "#/definitions/Timestamps"
                }
            }
        },
        "ResponsePeopleGroupMember": {
            "type": "array",
            "description": "The basic info of members in people group",
            "items": {
                "type": "object",
                "properties": {
                    "person_id": {
                        "type": "string",
                        "description": "the unique ID of person in people"
                    },
                    "external_ids": {
                        "type": "array",
                        "description": "the external IDs used for integrations",
                        "items": {
                            "$ref": "#/definitions/IDs"
                        }
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "email_address": {
                        "type": "string"
                    },
                    "timestamps": {
                        "$ref": "#/definitions/Timestamps"
                    }
                }
            }
        },
        "ResponseGroupArray": {
            "type": "array",
            "description": "The array of groups",
            "items": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "the unique ID of group"
                    },
                    "group_name": {
                        "type": "string",
                        "description": "the name of group"
                    }
                }
            }
        },
        "RequestPeopleGroup": {
            "type": "object",
            "description": "Define new group",
            "properties": {
                "group_name": {
                    "type": "string",
                    "description": "the unique name of group"
                },
                "group_color": {
                    "type": "string",
                    "format": "#RRGGBB",
                    "description": "the HEX color code in #RRGGBB. If not provided, system will use default color."
                },
                "group_note": {
                    "type": "string",
                    "description": "the optional note/explaination of this group"
                },
                "group_members": {
                    "type": "array",
                    "description": "the members to be added to the group. Please provide either id or email.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "member_id": {
                                "type": "string",
                                "description": "the ID of people member"
                            },
                            "member_email": {
                                "type": "string",
                                "description": "the email of people."
                            }
                        }
                    }
                }
            }
        },
        "AttendeePersonalData": {
            "type": "object",
            "properties": {
                "sessions": {
                    "type": "object"
                },
                "companies": {
                    "type": "object"
                },
                "docs": {
                    "type": "object"
                },
                "notes": {
                    "type": "object"
                }
            }
        },
        "GeneralActivityRecord": {
            "type": "object",
            "description": "A single record of people activity history",
            "properties": {
                "product": {
                    "type": "string",
                    "description": "the product of activity. E.g. App/Reg/etc."
                },
                "action": {
                    "type": "string",
                    "description": "the action info string"
                },
                "timestamp": {
                    "type": "string",
                    "description": "depends on the query parameter timestamp_format setting, this can return GMT/UTC timestamp integer or ISO string."
                }
            }
        },
        "Timestamps": {
            "type": "object",
            "description": "The timestamps for the object in either timestamp integer or ISO Date+Time+TimeZone format (E.g. 2016-09-02T15:26:49-04:00 for the same timezone of this event) . Please use query parameter to idenitfy which one you want. Default value is ISO format.",
            "properties": {
                "request_timestamp": {
                    "type": "string",
                    "description": "The time of this API request"
                },
                "creation_timestamp": {
                    "type": "string",
                    "description": "the time of object creation"
                },
                "update_timestamp": {
                    "type": "string",
                    "description": "the time of last modification"
                }
            }
        },
        "PlaceHolder": {
            "type": "object",
            "description": "This is the placeholder"
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        }
    },
    "parameters": {
        "EventIDParam": {
            "name": "event_id",
            "in": "path",
            "description": "the event ID of specific event.",
            "required": true,
            "type": "string"
        },
        "PersonIDParam": {
            "name": "person_id",
            "in": "path",
            "description": "the person ID of specific event.",
            "required": true,
            "type": "string"
        },
        "GroupIDParam": {
            "name": "group_id",
            "in": "path",
            "description": "the group ID.",
            "required": true,
            "type": "string"
        },
        "FieldIDParam": {
            "name": "field_id",
            "in": "path",
            "description": "the custome field ID.",
            "required": true,
            "type": "string"
        },
        "SessionIDParam": {
            "name": "session_id",
            "in": "path",
            "description": "the session ID (in event schedule).",
            "required": true,
            "type": "string"
        },
        "ResourceIDParam": {
            "name": "resource_id",
            "in": "path",
            "description": "the resource ID.",
            "required": true,
            "type": "string"
        },
        "LimitParam": {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned results",
            "required": false,
            "type": "number",
            "format": "int32"
        },
        "OffsetParam": {
            "name": "offset",
            "in": "query",
            "description": "Define the offset index of returned results",
            "required": false,
            "type": "number",
            "format": "int32"
        },
        "IDSystemParam": {
            "name": "ext_id_system",
            "in": "query",
            "description": "the external system of ID used in path. Default value is Eventmobi. Once used, all IDs will use external system. For each ID in path, if the external system ID is not defined, will use default instead.",
            "required": false,
            "type": "string"
        },
        "TimestampFormat": {
            "name": "timestamp_format",
            "in": "query",
            "description": "the external system of ID used in path. Default value is Eventmobi. Once used, all IDs will use external system. For each ID in path, if the external system ID is not defined, will use default instead.",
            "required": false,
            "type": "string",
            "default": "GMT/UTC timestamp integer",
            "enum": [
                "GMT/UTC timestamp integer",
                "ISO string with timezone"
            ]
        }
    }
}